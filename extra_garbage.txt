fuck

Leftover packet functions:
/**
size_t Packet::read_from_fifo(int fifo) {
	std::string ser_pkt ("");
	char * msg_buffer = new char [PKT_LEN];
	size_t total_read = 0, num_read = 0;

	while (total_read < PKT_LEN + 1) {
		num_read = read(fifo, msg_buffer, PKT_LEN + 1);
		total_read += num_read;
		std::cout << "read " << total_read << "\n";
	}	

	ser_pkt.assign(msg_buffer);
	delete[] msg_buffer;
	this->deserialize(ser_pkt);
	return total_read;
}

void Packet::write_to_fifo(int fifo) {
	std::string ser_pkt ("");
	size_t total_wrtn = 0, num_wrtn = 0;

	this->serialize(ser_pkt);
	std::cout << "len of ser pkt:" << ser_pkt.length();
	while (total_wrtn < PKT_LEN + 1) {
		std::cout << "Amount to write: " << (ser_pkt.length() + 1 - total_wrtn) << "\n";
		num_wrtn = write(fifo, ser_pkt.c_str(), (ser_pkt.length() + 1 - total_wrtn));
		total_wrtn += num_wrtn;
		std::cout << "wrote " << num_wrtn << "\n";
	}
}
*/

Leftover CS_Skt stuff
/**
int CS_Socket::send_pkt(int dest_sock, std::string& pkt, int pkt_len){
	int total_sent = 0, bytes_sent = 0;

	while (total_rcv < pkt_len) {
		bytes_sent = write(dest_sock, &pkt.c_str()[total_sent], pkt_len);
		if (bytes_sent < 0) {
			return -1;
		total_sent += bytes_sent;
	}
	return total_sent;
}

int CS_Socket::rcv_pkt(int send_sock, std::string& pkt, int pkt_len) {
	int total_rcv = 0, bytes_rcv = 0;
	char buffer[pkt_len + 1];
	std::string buffer_op;

	while (total_rcv < pkt_len) {
		bytes_rcv = read(send_sock, buffer, pkt_len);
		if (bytes_rcv < 0) {
			return -1;
		} else if (bytes_rcv == 0) {
			break;
		}
		buffer_op = buffer;
		pkt += buffer_op;
		memset(buffer, 0, pkt_len + 1);
	}
	return total_rcv;
}

*/

Older makefile

a3sdn:

ContClass.o: ContClass.cc, ContClass.h
	g++ -std=c++11 -Wall -Iinclude -Llib

SwClass.o: SwClass.cc, SwClass.h

RuleClass.o: RuleClass.cc, RuleClass.h

HeaderClass.o: HeaderClass.cc, HeaderClass.h

PktStatsClass.o: PktStatsClass.cc, PktStatsClass.h

CS_SocketClass.o: CS_SocketClass.cc, CS_SocketClass.h

IPRangeClass.o: IPRangeClass.cc, IPRangeClass.h

TimerClass.o: TimerClass.cc, TimerClass.h

parselib.o: parselib.cc, parselib.h
